apiVersion: policies.kyverno.io/v1alpha1
kind: ValidatingPolicy
metadata:
  name: restrict-get-resource
spec:
  evaluation:
    mode: Envoy
  variables:
    - name: body
      expression: json.Unmarshal(object.attributes.request.http.body)
    - name: isAllowedNamespace
      expression: has(variables.body.params.arguments) && string(variables.body.params.arguments.namespace) in ["default", "dev-team", "test"]
    - name: jwks
      expression: jwks.Fetch("http://keycloak.keycloak.svc.cluster.local/realms/master/protocol/openid-connect/certs")
    - name: jwtString
      expression: object.attributes.request.http.headers["authorization"].split(" ")[1]
    - name: decodedJwt
      expression: jwt.Decode(variables.jwtString, variables.jwks)
    - name: res
      expression: >-
        {
          "kind": dyn("SubjectAccessReview"),
          "apiVersion": dyn("authorization.k8s.io/v1"),
          "spec": dyn({
            "resourceAttributes": dyn({
              "group": "",
              "resource": string(variables.body.params.arguments.resource_type),
              "namespace": string(variables.body.params.arguments.namespace),
              "verb": "list"
            }),
            "user": dyn(variables.decodedJwt.Claims["email"]),
            "groups": dyn(variables.decodedJwt.Claims["groups"])
          })
        }
    - name: sar
      expression: >-
        resource.Post("authorization.k8s.io/v1", "subjectaccessreviews", variables.res)
  matchConditions:
  - expression: |
      has(json.Unmarshal(object.attributes.request.http.body).method)
        && json.Unmarshal(object.attributes.request.http.body).method == "tools/call"
        && has(json.Unmarshal(object.attributes.request.http.body).params.name)
        && json.Unmarshal(object.attributes.request.http.body).params.name == "k8s_get_resources"
    name: isToolsCall
  validations:
  - expression: |
      has(variables.body.params.arguments.all_namespaces)
        && variables.body.params.arguments.all_namespaces == "false"
        && has(variables.sar.status)
        && variables.sar.status.allowed == true ? envoy.Allowed().Response() : envoy.Denied(403).Response()